{"version":3,"file":"static/js/33.3d7dc179.chunk.js","mappings":"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","sources":["webpack://training-s-n/./src/components/Messages/Messages.module.css?8e7e","webpack://training-s-n/./src/components/Messages/DialogsList/Dialog/Dialog.module.css?a500","components/Messages/DialogsList/Dialog/Dialog.jsx","webpack://training-s-n/./src/components/Messages/DialogsList/DialogsList.module.css?677c","components/Messages/DialogsList/DialogsList.jsx","webpack://training-s-n/./src/components/Messages/Messanger/Messanger.module.css?c41a","webpack://training-s-n/./src/components/Messages/Messanger/Message/Message.module.css?939e","components/Messages/Messanger/Message/Message.jsx","webpack://training-s-n/./src/components/Messages/Messanger/MessangerHeader/MessangerHeader.module.css?2a5a","components/Messages/Messanger/MessangerHeader/MessangerHeader.jsx","components/Messages/Messanger/Messanger.jsx","components/Messages/Messages.jsx","components/Messages/MessagesContainer.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Messages_container__ugBGh\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Dialog_wrapper__hyUsl\",\"avatar\":\"Dialog_avatar__hVFBi\",\"info\":\"Dialog_info__9BHl-\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport dialogStyles from './Dialog.module.css';\r\n\r\nconst Dialog = (props) => {\r\n    return (\r\n        <>\r\n            <NavLink to={`${props.id}`} className={dialogStyles.link}>\r\n                <div className={dialogStyles.wrapper}>\r\n                    <div className={dialogStyles.avatar}>\r\n                        <img src={props.avatarLink} alt=\"avatar\" />\r\n                    </div>\r\n                    <div className={dialogStyles.info}>\r\n                        <h3>{props.name}</h3>\r\n                        <div>{props.lastMessage}</div>\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dialog","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DialogsList_container__9Tc6l\"};","import Dialog from './Dialog/Dialog'\r\nimport dialogsListStyles from './DialogsList.module.css';\r\n\r\n\r\nconst DialogsList = (props) => {\r\n    let dialogs = props.dialogs.map(dialog => <Dialog key={dialog.id} id={dialog.id} name={dialog.name}\r\n        lastMessage={dialog.lastMessage} avatarLink={dialog.avatarLink} />)\r\n\r\n    return (\r\n        <div className={dialogsListStyles.container}>\r\n            {dialogs}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsList","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Messanger_container__2ioT9\",\"messages\":\"Messanger_messages__AL8d6\",\"addMessage\":\"Messanger_addMessage__+M8J2\",\"Button\":\"Messanger_Button__-AgVb\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Message_container__ZSpnn\",\"active\":\"Message_active__PZed3\",\"me\":\"Message_me__AATWq\"};","import React from \"react\";\r\nimport messageStyles from './Message.module.css'\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={props.userId === props.authId ? messageStyles.container + ' ' + messageStyles.active : messageStyles.container} >\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","// extracted by mini-css-extract-plugin\nexport default {\"messangerHeader\":\"MessangerHeader_messangerHeader__JObfd\",\"avatar\":\"MessangerHeader_avatar__3Fx6j\",\"name\":\"MessangerHeader_name__JP-w2\",\"backButton\":\"MessangerHeader_backButton__jUo8V\"};","import React from \"react\";\r\nimport styles from './MessangerHeader.module.css'\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst MessangerHeader = props => {\r\n    const dialog = useSelector(state => state.messagesPage.dialogs).filter(dialog => dialog.id === props.dialogId)[0]\r\n\r\n    return (\r\n        <header className={styles.messangerHeader}>\r\n            <NavLink to='dialogs' className={styles.link}>\r\n                <div className={styles.backButton}></div>\r\n            </NavLink>\r\n            <figure className={styles.avatar}>\r\n                <img src={dialog.avatarLink} alt=\"avatar\" />\r\n            </figure>\r\n            <h3 className={styles.name}>{dialog.name}</h3>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default MessangerHeader","import React from \"react\";\r\nimport messangerStyles from './Messanger.module.css';\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { required } from './../../../Common/Validation/Validators';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport MessangerHeader from './MessangerHeader/MessangerHeader';\r\n\r\nconst Form = props => {\r\n    return (\r\n        <div className={messangerStyles.addMessage}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field name={\"message\"} component={\"textarea\"} placeholder='New message...' validate={[required]} />\r\n                <div className={messangerStyles.Button}>\r\n                    <button>Submit</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MessangerForm = reduxForm({ form: 'messanger' })(Form)\r\n\r\nconst Messanger = (props) => {\r\n    let { id } = useParams()\r\n\r\n    id = Number(id)\r\n\r\n    const addNewMessage = (values) => {\r\n        props.sendMessage(values.message, props.authId, id)\r\n        props.setLastMessage(id, values.message)\r\n        props.reset('messanger')\r\n    }\r\n\r\n    let messages = props.messages.filter(message => message.dialogId === id).map(message => {\r\n        return <Message key={String(message.id)} userId={message.userId} authId={props.authId} message={message.message} />\r\n    })\r\n\r\n    return (\r\n        <div className={messangerStyles.container}>\r\n            <MessangerHeader dialogId={id}/>\r\n            <div className={messangerStyles.messages}>\r\n                {messages}\r\n            </div>\r\n            <MessangerForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    messages: state.messagesPage.messages,\r\n    authId: state.auth.id\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(Messanger)","import React from \"react\";\r\nimport messagesStyles from './Messages.module.css'\r\nimport DialogsList from './DialogsList/DialogsList';\r\nimport { useParams } from 'react-router-dom';\r\nimport Messanger from './Messanger/Messanger';\r\n\r\nconst Messages = props => {\r\n    const { id } = useParams()\r\n\r\n    if (id === 'dialogs') return <DialogsList dialogs={props.dialogs} />\r\n    return (\r\n        <div className={messagesStyles.container}>\r\n            <Messanger setLastMessage={props.setLastMessage} sendMessage={props.sendMessage} reset={props.reset} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messages","import { sendMessage, setLastMessage } from './../../redux/reduсers/messagesReducer';\r\nimport Messages from './Messages';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from './../../HOC/withAuthRedirect';\r\nimport { reset } from 'redux-form';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    dialogs: state.messagesPage.dialogs,\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { sendMessage, setLastMessage, reset }),\r\n    withAuthRedirect\r\n)(Messages)\r\n\r\n"],"names":["props","to","id","className","dialogStyles","src","avatarLink","alt","name","lastMessage","dialogs","map","dialog","dialogsListStyles","userId","authId","messageStyles","message","useSelector","state","messagesPage","filter","dialogId","styles","MessangerForm","reduxForm","form","messangerStyles","onSubmit","handleSubmit","Field","component","placeholder","validate","required","connect","messages","auth","useParams","Number","String","values","sendMessage","setLastMessage","reset","messagesStyles","compose","withAuthRedirect","Messages"],"sourceRoot":""}